// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ZZZ_TextMap.Defs
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct TextMapTemplate : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static TextMapTemplate GetRootAsTextMapTemplate(ByteBuffer _bb) { return GetRootAsTextMapTemplate(_bb, new TextMapTemplate()); }
  public static TextMapTemplate GetRootAsTextMapTemplate(ByteBuffer _bb, TextMapTemplate obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyTextMapTemplate(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, TextMapTemplateVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TextMapTemplate __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ZZZ_TextMap.Defs.TextMap? Data(int j) { int o = __p.__offset(4); return o != 0 ? (ZZZ_TextMap.Defs.TextMap?)(new ZZZ_TextMap.Defs.TextMap()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DataLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<ZZZ_TextMap.Defs.TextMapTemplate> CreateTextMapTemplate(FlatBufferBuilder builder,
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartTable(1);
    TextMapTemplate.AddData(builder, dataOffset);
    return TextMapTemplate.EndTextMapTemplate(builder);
  }

  public static void StartTextMapTemplate(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, Offset<ZZZ_TextMap.Defs.TextMap>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, Offset<ZZZ_TextMap.Defs.TextMap>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<ZZZ_TextMap.Defs.TextMap>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<ZZZ_TextMap.Defs.TextMap>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<ZZZ_TextMap.Defs.TextMapTemplate> EndTextMapTemplate(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<ZZZ_TextMap.Defs.TextMapTemplate>(o);
  }
  public static void FinishTextMapTemplateBuffer(FlatBufferBuilder builder, Offset<ZZZ_TextMap.Defs.TextMapTemplate> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedTextMapTemplateBuffer(FlatBufferBuilder builder, Offset<ZZZ_TextMap.Defs.TextMapTemplate> offset) { builder.FinishSizePrefixed(offset.Value); }
  public TextMapTemplateT UnPack() {
    var _o = new TextMapTemplateT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TextMapTemplateT _o) {
    _o.Data = new List<ZZZ_TextMap.Defs.TextMapT>();
    for (var _j = 0; _j < this.DataLength; ++_j) {_o.Data.Add(this.Data(_j).HasValue ? this.Data(_j).Value.UnPack() : null);}
  }
  public static Offset<ZZZ_TextMap.Defs.TextMapTemplate> Pack(FlatBufferBuilder builder, TextMapTemplateT _o) {
    if (_o == null) return default(Offset<ZZZ_TextMap.Defs.TextMapTemplate>);
    var _data = default(VectorOffset);
    if (_o.Data != null) {
      var __data = new Offset<ZZZ_TextMap.Defs.TextMap>[_o.Data.Count];
      for (var _j = 0; _j < __data.Length; ++_j) { __data[_j] = ZZZ_TextMap.Defs.TextMap.Pack(builder, _o.Data[_j]); }
      _data = CreateDataVector(builder, __data);
    }
    return CreateTextMapTemplate(
      builder,
      _data);
  }
}

public class TextMapTemplateT
{
  [Newtonsoft.Json.JsonProperty("data")]
  public List<ZZZ_TextMap.Defs.TextMapT> Data { get; set; }

  public TextMapTemplateT() {
    this.Data = null;
  }

  public static TextMapTemplateT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<TextMapTemplateT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static TextMapTemplateT DeserializeFromBinary(byte[] fbBuffer) {
    return TextMapTemplate.GetRootAsTextMapTemplate(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    TextMapTemplate.FinishTextMapTemplateBuffer(fbb, TextMapTemplate.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class TextMapTemplateVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfTables(tablePos, 4 /*Data*/, ZZZ_TextMap.Defs.TextMapVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
